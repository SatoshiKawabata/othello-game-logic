const {
  Reducer,
  canPlace,
  place,
  getPlacableCells,
  getNextGameState,
  isBoardFull,
  getStoneNum,
  getDiffCells
} = require("./Reducers");
const {ActionCreator} = require("./ActionCreator");

describe("Reducer", () => {
  it("white should win", () => {
    const next = Reducer({
      gameState: "black",
      board: [
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, -1, 1, 1, 1 ],
        [ 1, 1, 1, -1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 0, 1, 1, 1, 1 ]
      ]
    }, ActionCreator.putStone(3, 7, "black"));
    expect(next.gameState).toBe("win-white");
    expect(next.board).toEqual([
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, -1, 1, 1, 1 ],
      [ 1, 1, 1, -1, 1, 1, 1, 1 ],
      [ 1, 1, 1, -1, 1, 1, 1, 1 ],
      [ 1, 1, 1, -1, 1, 1, 1, 1 ],
      [ 1, 1, 1, -1, 1, 1, 1, 1 ]
    ]);
  });

  it("should reset", () => {
    const next = Reducer({
      gameState: "black",
      board: [
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, -1, 1, 1, 1 ],
        [ 1, 1, 1, -1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 0, 1, 1, 1, 1 ]
      ]
    }, ActionCreator.reset());
    expect(next.gameState).toBe("init");
    expect(next.board).toEqual([
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, -1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ]);
  });

  it("should reset", () => {
    const next = Reducer({
      gameState: "black",
      board: [
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, -1, 1, 1, 1 ],
        [ 1, 1, 1, -1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 1, 1, 1, 1, 1 ],
        [ 1, 1, 1, 0, 1, 1, 1, 1 ]
      ]
    }, ActionCreator.skip());
    expect(next.gameState).toBe("white");
    expect(next.board).toEqual([
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, -1, 1, 1, 1 ],
      [ 1, 1, 1, -1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 0, 1, 1, 1, 1 ]
    ]);
  });

  it("should set player name", () => {
    let next = Reducer(undefined, ActionCreator.setPlayerName("test-player", "white"));
    next = Reducer(next, ActionCreator.setPlayerName("test-player2", "black"));
    expect(next.gameState).toBe("init");
    expect(next.white.name).toBe("test-player");
    expect(next.black.name).toBe("test-player2");
    expect(next.board).toEqual([
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, -1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ]);
  });

  it("canPlace", () => {
    let board = [
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, -1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ];
    expect(canPlace(board, {x: 0, y: 0, type: "white"})).toBe(false);
    expect(canPlace(board, {x: 4, y: 3, type: "white"})).toBe(false);
    expect(canPlace(board, {x: 4, y: 2, type: "white"})).toBe(true);
  });

  describe("place", () => {
    it("left direction", () => {
      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 5, y: 3, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, 1, 1, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);
    });

    it("right direction", () => {
      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 2, y: 4, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 1, 1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);
    });

    it("top direction", () => {
      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 3, y: 5, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 0, 1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 1, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);
    });

    it("bottom direction", () => {
      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 4, y: 2, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 1, 0, 0, 0 ],
        [ 0, 0, 0, 1, 1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);
    });

    it("right bottom direction", () => {
      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1,1, 1, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 2, y: 2, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 1, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);

      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1,1, 1, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 3, y: 2, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 1, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);
    });

    it("right top direction", () => {
      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 2, y: 5, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);

      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 1 ],
        [ 0, 0, 0, 0, 0, 0, -1, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 5, y: 2, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 1 ],
        [ 0, 0, 0, 0, 0, 0, 1, 0 ],
        [ 0, 0, 0, 0, 0, 1, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);
    });

    it("left top direction", () => {
      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1,1, 1, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 5, y: 5, type: "black" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 1, 0, 0 ],
        [ 0, 0, 0, 0, 0, -1, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);

      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1,1, 1, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 6, y: 5, type: "black" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, -1, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, -1, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);
    });

    it("left bottom direction", () => {
      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, -1, -1, 0, 0, 0 ],
        [ 0, 0, 1, 1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ], { x: 4, y: 2, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 1, 0, 0, 0 ],
        [ 0, 0, 0, 1, 1, 0, 0, 0 ],
        [ 0, 0, 1, 1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ]
      ]);

      expect(place([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, -1, 0, 0 ],
        [ 0, 0, 0, 0, 1, 0, 0, 0 ]
      ], { x: 6, y: 5, type: "white" })).toEqual([
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, -1, 0, 0, 0 ],
        [ 0, 0, 0, -1, 1, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0, 0, 1, 0 ],
        [ 0, 0, 0, 0, 0, 1, 0, 0 ],
        [ 0, 0, 0, 0, 1, 0, 0, 0 ]
      ]);
    });

    it("place free", () => {
      expect(place([
        [  0,  0,  0,  0,  0,  0,  0,  0 ],
        [  0,  0,  0,  0,  0,  0,  0,  0 ],
        [  0,  0, -1,  0,  1, -1,  0,  0 ],
        [ -1,  1,  0,  1,  1,  0,  0,  0 ],
        [  0,  1, -1,  1, -1,  1,  0,  0 ],
        [  0, -1,  1, -1,  0,  1, -1,  0 ],
        [ -1,  1,  0,  0,  0, -1,  0,  0 ],
        [  0,  0,  0,  0,  0,  0,  0,  0 ]
      ], { x: 0, y: 4, type: "black" })).toEqual([
        [  0,  0,  0,  0,  0,  0,  0,  0 ],
        [  0,  0,  0,  0,  0,  0,  0,  0 ],
        [  0,  0, -1,  0,  1, -1,  0,  0 ],
        [ -1, -1,  0,  1,  1,  0,  0,  0 ],
        [ -1, -1, -1,  1, -1,  1,  0,  0 ],
        [  0, -1,  1, -1,  0,  1, -1,  0 ],
        [ -1,  1,  0,  0,  0, -1,  0,  0 ],
        [  0,  0,  0,  0,  0,  0,  0,  0 ]
      ]);

      expect(place([
        [  0,  0, -1,  0,  0,  1,  0,  0 ],
        [  0,  0,  1,  0,  1,  0,  0,  0 ],
        [  0,  0,  1,  1,  1, -1,  0,  0 ],
        [ -1,  1,  0,  1,  1,  0,  0,  0 ],
        [  0,  1, -1,  1, -1,  1,  0,  0 ],
        [ -1, -1,  1, -1,  1,  1, -1,  0 ],
        [ -1,  1,  0,  0,  0,  1,  0,  0 ],
        [  0,  0,  0,  0,  0,  0, -1,  0 ]
      ], { x: 2, y: 3, type: "black" })).toEqual([
        [  0,  0, -1,  0,  0,  1,  0,  0 ],
        [  0,  0, -1,  0,  1,  0,  0,  0 ],
        [  0,  0, -1,  1,  1, -1,  0,  0 ],
        [ -1, -1, -1,  1,  1,  0,  0,  0 ],
        [  0, -1, -1, -1, -1,  1,  0,  0 ],
        [ -1, -1,  1, -1, -1,  1, -1,  0 ],
        [ -1,  1,  0,  0,  0, -1,  0,  0 ],
        [  0,  0,  0,  0,  0,  0, -1,  0 ]
      ]);
    });
  });


  it("isBoardFull", () => {
    let board = [
      [ -1, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, -1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ];
    expect(isBoardFull(board)).toBe(false);
    board = [
      [ -1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, -1, 1, 1, 1 ],
      [ 1, 1, 1, -1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1, 1, 1 ]
    ];
    expect(isBoardFull(board)).toBe(true);
  });

  it("getStoneNum", () => {
    const board = [
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, -1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ];
    expect(getStoneNum(board)).toEqual({
      whiteNum: 2,
      blackNum: 2
    })
  });

  describe("compareBoards", () => {
    expect(getDiffCells([
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, 1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ], [
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 1, -1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 1, 0, 0, 0 ],
      [ 0, 0, 0, 1, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ])).toEqual([
      {x: 4, y: 2},
      {x: 4, y: 3},
      {x: 3, y: 5}
    ]);
  });

  describe("getPlacableCells", () => {
    expect(getPlacableCells([
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, -1, 0, 0, 0 ],
      [ 0, 0, 0, -1, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ], "white")).toEqual([
      {x: 4, y: 2},
      {x: 5, y: 3},
      {x: 2, y: 4},
      {x: 3, y: 5}
    ]);

    expect(getPlacableCells([
      [  0,  0, -1,  0,  0,  1,  0,  0 ],
      [  0,  0,  1,  0,  1,  0,  0,  0 ],
      [  0,  0,  1,  1,  1, -1,  0,  0 ],
      [ -1,  1,  0,  1,  1,  0,  0,  0 ],
      [  0,  1, -1,  1, -1,  1,  0,  0 ],
      [ -1, -1,  1, -1,  1,  1, -1,  0 ],
      [ -1,  1,  0,  0,  0,  1,  0,  0 ],
      [  0,  0,  0,  0,  0,  0, -1,  0 ]
    ], "white")).toEqual([
      {y: 1, x: 6},
      {y: 2, x: 6},
      {y: 3, x: 2},
      {y: 3, x: 6},
      {y: 4, x: 7},
      {y: 5, x: 7},
      {y: 6, x: 3},
      {y: 6, x: 4},
      {y: 6, x: 7}
    ]);

    expect(getPlacableCells([
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, 1, 0, 0, 0 ],
      [ 0, 0, 0, 1, 1, 0, -1, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0, 0, 0 ]
    ], "white")).toEqual([]);
  });
});